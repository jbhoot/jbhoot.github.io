*,
*::before,
*::after {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

:root {
    /*Ref: https://every-layout.dev/rudiments/modular-scale/*/
    /*See https://type-scale.com and https://www.modularscale.com/*/
    /*to play with other values.*/
    --base-size: 1rem;
    --ratio: 1.25;
    --measure: 80ch;
    line-height: 1.5;

    --s-4: calc(var(--s-3) / var(--ratio));
    --s-3: calc(var(--s-2) / var(--ratio));
    --s-2: calc(var(--s-1) / var(--ratio));
    --s-1: calc(var(--s0) / var(--ratio));
    --s0: var(--base-size);
    --s1: calc(var(--s0) * var(--ratio));
    --s2: calc(var(--s1) * var(--ratio));
    --s3: calc(var(--s2) * var(--ratio));
    --s4: calc(var(--s3) * var(--ratio));

    --padding-large: calc(var(--s0) + 2vw);
    --padding: calc(var(--s0) + 0.25vw);
}

body {
    font-family: sans-serif;
    font-size: calc(var(--s0) + 0.25vw);
    padding: var(--padding) var(--padding-large);
}

* {
    max-inline-size: var(--measure);
}

/*
The point of using measure is to limit each column of *content* to a readable length.
There might as well be multiple such columns horizontally.
Each column length ideally is equal to the value of the measure. ￼
So the exceptions to the rule that applies measure should be those elements which could be used to lay out horizontal columns of content. ￼
 */

html,
body {
    max-inline-size: none;
}

body *+* {
    margin-top: 1em;
}

h1,
h2,
h3 {
    line-height: 1.25;
}

hgroup>*+* {
    margin-top: 2px;
}

figcaption,
caption {
    font-size: 0.9em;
    font-style: italic;
}

caption {
    margin-block-start: 5px;
    text-align: left;
    caption-side: bottom;
}

figcaption {
    margin-block-start: 5px;
}

code {
    padding-inline: 3px;
    outline: 1px solid #f3efef;
}

pre {
    outline: 1px solid black;
    padding: var(--padding);
    color: black;
    overflow: auto;
}

:is(h1, h2, h3, h4, h5, h6) code,
pre>code {
    outline: none;
    padding-inline: 0;
    margin-inline: inherit;
}

img {
    outline: 1px solid black;
}

ins {
    text-decoration: none;
    background-color: rgba(0, 128, 0, 0.2);
    padding: 0 4px 0 0;
}

ins::before {
    content: "+ " attr(datetime);
    background-color: green;
    color: white;
    padding: 0 4px 0 4px;
}

table,
th,
td {
    border-collapse: collapse;
}

th,
td {
    border: 1px solid #e0e0e0;
    padding: var(--padding);
    text-align: left;
}

tr:hover {
    background-color: #f0f0f0;
}

ul {
    list-style: circle;
}

@keyframes animation-kf-apparate {
    0% {
        width: 0;
        transform: translateY(-100%);
    }

    33% {
        width: 1ch;
        transform: translateY(-100%);
    }

    to {
        width: 1ch;
        transform: translateY(0%);
    }
}

.animation-apparate {
    display: inline-block;
    width: 0;
    transform: translateY(-100%);
    animation-name: animation-kf-apparate;
    animation-duration: 1s;
    animation-fill-mode: forwards;
}

@keyframes animation-kf-grow-up {
    0% {
        opacity: 1;
        transform: translateY(0%);
        text-transform: lowercase;
    }

    50% {
        opacity: 0;
        transform: translateY(100%);
        text-transform: lowercase;
    }

    to {
        opacity: 1;
        transform: translateY(0%);
        text-transform: uppercase;
    }
}

.animation-grow-up {
    display: inline-block;
    animation-name: animation-kf-grow-up;
    animation-duration: 1s;
    animation-fill-mode: forwards;
}

.apparate-parent {
    overflow: hidden;
    font-family: monospace;
}

.apparate-parent *+* {
    margin-top: 0;
}

.animation-delay\:1s {
    animation-delay: 1s;
}

.animation-delay\:2s {
    animation-delay: 2s;
}

.animation-delay\:3s {
    animation-delay: 3s;
}