Nice summary: https://news.ycombinator.com/item?id=25925867
https://news.ycombinator.com/item?id=25895807

NOTE: None of the lisps, except Common Lisp and Clojure, have proper editor tooling. Especially schemes. Tools like geiser may break down any time. Unsatisfactory autocomplete, peek-at-documentation, etc. Conjure supports to provide support for a lot of them including Guile and Janet, but a closer look at this https://github.com/Olical/conjure/wiki/Client-features suggests that not even completion or go-to-df are supported for most of them. So all of these are a big no-no right here.

What I want in a lisp for scripting
JSON parsing
IO - file, network
Call shell commands without ceremony
IDE integration, autocomplete
Text munging
Alive - decent-sized community
True lisps
- Common Lisp and its derivatives
  No other lisp has an REPL exp / debugging like CL
  Imperative-first though, mutability by default
  No good concurrency story like clojure
  Mutation is deeply entrenched within Common Lisp's way of doing things (https://old.reddit.com/r/lisp/comments/c0y950/where_does_common_lisp_has_advantages_in_respect/er95xy7/)
  SLIME for repl,tooling
  Why not Common Lisp: https://news.ycombinator.com/item?id=26072351
- Scheme
  These are a disaster. None of them fully implements any of the recommendations. If one has stdlib, then it lacks community (Chez). If one has community, then it lacks cross-platform support or compilation-to-single-binary support (Guile). and what not.
  None of them, may be except Guile, have proper tooling support.
  Choosing the right scheme is a huge time sink and not worth it.
  Functional-first
  Mutation frowned upon
  Geiser seems to be the go-to editing tooling for all schemes (Guile, Chez, Chicken, Gauche, etc.). But things regularly break in it. Perhaps runs the best only for Guile.
  All schemes are based on a standard, so API knowledge is transferrable across schemes (to some extent)
  - Guile
    May be used for scripting, like Janet
    Embeddable
  - Chicken
    Unanimous agreement that it has the most welcoming and loving community!
    Its packaging system of eggs is well loved.
    https://news.ycombinator.com/item?id=20554957
    Knodium.com site in Chicken: https://www.youtube.com/watch?v=gOPuWi-dbQg
    https://registers.app/
  - Chez
  - Gambit | Gerbil:
    great performance and was good for system programming
    https://fare.livejournal.com/188429.html
- Racket
  Functional-first
  Mutation frowned upon
  Based on scheme, but veered off enough
  Pro: Most batteries inclued in terms of standard library and 3rd party libraries of all Lisps (except Clojre)
  Geiser for repl, tooling?
  Racket is a very language-oriented ecosystem. #lang directive needed to start with.
  "My experience with Racket is that, it's good for programming language research, either DSL or GPL, but I won't use it to do anything else."
  Con: https://old.reddit.com/r/lisp/comments/igci3l/racket_seems_op/g2ulpab/
  Con: https://old.reddit.com/r/lisp/comments/rmqkvo/scheme_vs_racket/hpokdp3/
  Con: Racket's interactivity &lt; Guile &lt; Common Lisp. Racket is basically lisp syntax but Haskell interactivity.
  Racket's REPL is worse than Clojure. https://old.reddit.com/r/lisp/comments/igci3l/racket_seems_op/g2w1vfh/
- Clojure

Lispish:
- Fennel is just Lua with a lispy syntax. Fennel gives you nothing over Lua but parentheses. Its as imperative and mutable as Lua. In contrast, ReScript provides a huge value over JavaScript wrt its immutability and ML-like type system, even while sacrificing other FP principles.
- Janet: Better than Fennel wrt lispyness. But doesn't call itself a lisp on its own repo. More a competitor to lua itself. Serves same niche as Lua.
- Urn: Lisp that compiles to Lua. Actual lisp compared to Fennel. If we really want to use Lua, then urn is better. Even has bindigns to love2d lib.

Scripting
- Guile seems to have the most bindings for shell
  e.g., https://www.gnu.org/software/guile/manual/html_node/POSIX.html
- Scheme shell: https://scsh.net/
- Racket:
  Setup: https://docs.racket-lang.org/guide/scripts.html
  Zuo, a mini-Racket: Has shell wrappers, and all io utilities, etc.


Summary
- Racket: all-rounder Scheme-ish lang. Most usable in terms of ecosystem. GUI. Cross-platform (on Windows too). - Guile: good stdlib. Good for scripting (but Racket should be too). Official scripting language for GNU. Probably the most full-features Scheme
- Chicken: 2nd most full-featured Scheme.
- CL: Different from all others. Best REPL. Best commercial support. Probably not as seamless as others for scripting. Does not care about being FP-focused.
- Others
