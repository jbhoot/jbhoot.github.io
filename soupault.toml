[settings]
strict = true
verbose = true
debug = false

site_dir = "site"
build_dir = "build"

# Pages with other extensions are considered static assets
# and copied to build/ unchanged
page_file_extensions = ["html", "md", "rst", "adoc"]
# Drafts use .htm
ignore_extensions = ["htm", "htm~", "html~"]

# Treat files as content to insert in the template,
# unless they have an <html> element in them.
generator_mode = true
complete_page_selector = "html"

default_template_file = "templates/default.html"
# The content will be inserted into element selected by default_content_selector,
default_content_selector = "main"

# Set the document type to HTML5, unless the page already has
# a doctype declaration.
doctype = "<!DOCTYPE html>"
keep_doctype = true
pretty_print_html = true

clean_urls = true
plugin_discovery = true
plugin_dirs = ["plugins"]

[preprocessors]
md = "cmark --unsafe --smart"

[templates.index-page]
file = "templates/index-page.html"
content_selector = "main"
page = ["index.html"]

[index]
index = true
index_first = true
# Treat a folder containing an index.html and a .leaf file as a normal page. This allows putting assets (e.g., images) of a page alongside itself)
# https://soupault.app/reference-manual/#treating-index-pages-as-normal-pages
leaf_file = ".leaf"
sort_by = "timestamp"
sort_type = "calendar"
sort_descending = true
# Formats: https://man7.org/linux/man-pages/man1/date.1.html
date_formats = ["%F"]

dump_json = "index.json"

[index.fields.title]
selector = ["h1"]

[index.fields.date]
selector = ["hgroup time"]

[index.fields.timestamp]
selector = ["hgroup time"]
extract_attribute = "datetime"
fallback_to_content = false

[index.fields.excerpt]
selector = ["hgroup ~ p"]

[index.fields.excerpt_2]
selector = ["hgroup ~ p + p"]

[index.views.all-posts-grid]
include_subsections = true
index_selector = ".all-posts.grid"
index_item_template = """
  <article class="box" style="--box-color-bg: var(--color-light-2); --box-padding: var(--s-3);">
    <hgroup>
    <p>Published: <time datetime="{{timestamp}}">{{date}}</time></p>
    <h2><a href="{{url}}">{{title}}</a></h2>
    </hgroup>
    <p>{{excerpt}} [...]</p>
  </article>
  """

[index.views.all-posts-list]
include_subsections = true
index_selector = "ul.all-posts"
index_template = """
  <h1> My writings </h1>
  <div>
  <ul class='all-posts'>
  {% for e in entries %}
  <li>
    <a href="{{e.url}}" class="font-weight:600">{{e.title}}</a>
    <p class="margin-block-start:2px font-size:0.9em">Published: <time datetime="{{e.timestamp}}">{{e.date}}</time></p>
  </li>
  {% endfor %}
  </ul>
  </div>
  """
lua_source = '''
    -- *Pre-requisite*: `site/index.html` should contain a placeholder `<ul class='all-posts'></ul>` element even if we don't wish to put the list of all posts in our main index. Failing this, soupault will not pick up the above `[index.views.all-posts-list]` definition for processing at all.

    -- Now, soupault sees the placeholder `<ul class='all-posts'>` element in `site/index.html` and processes `[index.views.all-posts-list]`, which asks soupault to

    -- 1. delete the placeholder node from `site/index.html`, thus tidying up the main index page.
    -- 2. generate the HTML for the list of all posts
    -- 3. generate an index page `site/writings.html` and put the above HTML in it
    -- 4. store the generated `site/writings.html` in `pages` env, from where soupault will pick the page and add it to the output.

    -- From the manual:
    -- As you can see, generated pages are stored in the pages environment. When an index processor finishes, soupault extracts that variable from its environment and adds generated pages to the page processing queue.
    -- The pages variable must be a table, and its items must be tables with page_file and page_content fields.
    -- The page_file field is the file path where the page would have been at if it was hand-written. Most of the time you will want to generate it with Sys.join_path(Sys.dirname(page_file), "page_name.html") to make it appear in the same directory as the index page being processed, but there are no restrictions: you can use any path and place the generated page in any section.

    -- see pre-requisite and step 1 above
    placeholder_container_on_main_index = HTML.select_one(page, config["index_selector"])
    HTML.delete(placeholder_container_on_main_index)

    -- step 2
    env = {}
    env["entries"] = site_index
    rendered_entries = HTML.parse(String.render_template(config["index_template"], env))

    -- step 3
    all_posts_index_file = Sys.join_path(Sys.dirname(page_file), "writings.html")
    all_posts_index_content = HTML.pretty_print(rendered_entries)

    -- step 4
    pages = {}
    pages[1] = {}
    pages[1]["page_file"] = all_posts_index_file
    pages[1]["page_content"] = all_posts_index_content
  '''

[index.views.recent-posts-list]
include_subsections = true
max_items = 5
index_selector = "ul.recent-posts"
index_item_template = """
  <li>
    <a href="{{url}}" class="font-weight:600">{{title}}</a>
    <p class="margin-block-start:2px font-size:0.9em">Published: <time datetime="{{timestamp}}">{{date}}</time></p>
  </li>
  """

[index.views.recent-posts-grid]
include_subsections = true
max_items = 6
index_selector = ".recent-posts.grid"
index_item_template = """
  <article class="box" style="--box-color-bg: var(--color-light-2); --box-padding: var(--s-3);">
    <hgroup>
    <p>Published: <time datetime="{{timestamp}}">{{date}}</time></p>
    <h3><a href="{{url}}">{{title}}</a></h3>
    </hgroup>
    <p>{{excerpt}} [...]</p>
    <!-- <p>{{excerpt_2}} [...]</p> -->
  </article>
  """

#[hooks.pre-process]
#lua_source = '''
#  base_path = Sys.dirname(Sys.dirname(target_file))
#  file_name = Sys.basename(target_file)
#
#  target_leaf_dir = Sys.basename(Sys.dirname(target_file))
#  regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}-"
#
#  print(global_data)
#
#  if Regex.match(target_leaf_dir, regex) then
#    new_target_leaf_dir = Regex.replace(target_leaf_dir, regex, "")
#    new_target_dir = Sys.join_path(base_path, new_target_leaf_dir)
#    new_target_file = Sys.join_path(new_target_dir, file_name)
#    print(target_dir .. "->" .. new_target_dir)
#    print(target_file .. "->" .. new_target_file)
#    target_dir = new_target_dir
#    target_file = new_target_file
#  end
#'''

[widgets.page-title]
widget = "title"
default = "Jayesh Bhoot's Website"
selector = ["p.title", "h1"]
append = " @ Jayesh Bhoot's Website"

# Look at https://soupault.app/blog/toc/ for more options
[widgets.table-of-contents]
widget = "toc"
selector = ".toc"
min_level = 2
max_level = 3
numbered_list = true
use_heading_slug = true
toc_list_class = "toc"
toc_class_levels = true
ignore_heading_selectors = [".no-toc"]
heading_links = true
heading_link_class = "toc-heading-link"
heading_link_text = "ยง" # silcrow sign / section sign
heading_links_append = true

[widgets.delete_draft_content]
widget = "delete_element"
selector = ".draft"